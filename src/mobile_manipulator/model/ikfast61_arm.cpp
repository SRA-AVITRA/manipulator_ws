/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-04-02 14:23:03.178782
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39;
x0=IKcos(j[1]);
x1=IKsin(j[0]);
x2=IKcos(j[0]);
x3=IKsin(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[2]);
x6=IKcos(j[3]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=((0.00158999799016431)*x2);
x11=((0.999998735952397)*x1);
x12=((0.082)*x0);
x13=((0.02)*x5);
x14=((0.999998735952397)*x9);
x15=((0.999998735952397)*x8);
x16=((0.00158999799016431)*x9);
x17=((0.00158999799016431)*x8);
x18=(x3*x4);
x19=(x0*x5);
x20=(x4*x5);
x21=(x0*x3);
x22=((((0.000321179594013191)*x2))+(((-0.201999744662384)*x1)));
x23=((((-1.0)*x10))+x11);
x24=((((-1.0)*x11))+x10);
x25=((((0.201999744662384)*x2))+(((0.000321179594013191)*x1)));
x26=((((0.00158999799016431)*x1))+(((0.999998735952397)*x2)));
x27=((-1.0)*x26);
x28=((-0.02)*x23);
x29=((((-1.0)*x19))+x18);
x30=(x20+x21);
x31=(x0*x27);
x32=(x27*x3);
x33=(x27*x5);
x34=((-0.02)*x27);
x35=(x19*x27);
x36=(x29*x6);
x37=(x30*x7);
x38=(((x6*((((x21*x23))+((x20*x23))))))+((x7*((((x18*x24))+((x19*x23)))))));
x39=(((x6*((((x21*x27))+((x20*x27))))))+((x7*((((x18*x26))+x35)))));
IkReal x40=(x18*x24);
IkReal x41=((0.082)*x23);
eetrans[0]=(((x21*x22))+((x6*(((((0.02)*x40))+((x0*x13*x23))))))+((x7*(((((-0.082)*x40))+(((-1.0)*x19*x41))))))+((x6*(((((-1.0)*x12*x23*x3))+(((-1.0)*x20*x41))))))+((x4*(((((0.000295739626170562)*x2))+(((-0.185999764887146)*x1))))))+((x7*((((x21*x28))+((x20*x28))))))+((x20*x22)));
IkReal x42=(x18*x26);
eetrans[1]=((0.188)+((x6*((((x13*x31))+(((0.02)*x42))))))+((x21*x25))+((x7*((((x20*x34))+((x21*x34))))))+((x6*(((((-1.0)*x12*x32))+(((-0.082)*x20*x27))))))+((x4*(((((0.000295739626170562)*x1))+(((0.185999764887146)*x2))))))+((x7*(((((-0.082)*x35))+(((-0.082)*x42))))))+((x20*x25)));
eetrans[2]=((0.2927)+(((0.186)*x0))+((x6*(((((-0.082)*x18))+((x12*x5))))))+(((-0.202)*x18))+((x7*(((((-1.0)*x12*x3))+(((-0.082)*x20))))))+(((0.202)*x19))+((x7*((((x0*x13))+(((-0.02)*x18))))))+((x6*(((((0.02)*x21))+((x13*x4)))))));
eerot[0]=(((x16*x38))+((x14*x26))+((x15*x38))+((x17*x27)));
eerot[1]=(((x16*x39))+((x14*x23))+((x15*x39))+((x17*x24)));
eerot[2]=(((x8*(((((0.999998735952397)*x37))+(((0.999998735952397)*x36))))))+((x9*(((((0.00158999799016431)*x36))+(((0.00158999799016431)*x37)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 5; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=px;
new_r01=r01;
new_py=((-0.188)+py);
new_r02=r02;
new_pz=((-0.2927)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=((px*px)+(py*py)+(pz*pz));
{
IkReal j0eval[1];
j0eval[0]=((px*px)+(py*py));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j0, j1, j2, j3, j4]

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
CheckValue<IkReal> x44 = IKatan2WithCheck(IkReal(((((-0.00158999799016431)*py))+(((0.999998735952397)*px)))),IkReal(((((0.999998735952397)*py))+(((0.00158999799016431)*px)))),IKFAST_ATAN2_MAGTHRESH);
if(!x44.valid){
continue;
}
IkReal x43=x44.value;
j0array[0]=((-1.0)*x43);
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((3.14159265358979)+(((-1.0)*x43)));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( (((((0.00158999799016431)*r00*sj0))+(((-0.00158999799016431)*cj0*r01))+(((0.999998735952397)*cj0*r00))+(((0.999998735952397)*r01*sj0)))) < -1-IKFAST_SINCOS_THRESH || (((((0.00158999799016431)*r00*sj0))+(((-0.00158999799016431)*cj0*r01))+(((0.999998735952397)*cj0*r00))+(((0.999998735952397)*r01*sj0)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x45=IKasin(((((0.00158999799016431)*r00*sj0))+(((-0.00158999799016431)*cj0*r01))+(((0.999998735952397)*cj0*r00))+(((0.999998735952397)*r01*sj0))));
j4array[0]=((0.00158999866010903)+x45);
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((3.1431826522499)+(((-1.0)*x45)));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

IkReal op[4+1], zeror[4];
int numroots;
IkReal x46=px*px;
IkReal x47=pz*pz;
IkReal x48=py*py;
IkReal x49=((0.270837304884896)*r02);
IkReal x50=((0.0656110499719259)*r02);
IkReal x51=((0.00358387422796182)*r02);
IkReal x52=((0.0128618843346435)*r02);
IkReal x53=(cj0*r00);
IkReal x54=(px*r02);
IkReal x55=((0.698631345980389)*sj0);
IkReal x56=(r00*sj0);
IkReal x57=(cj0*r01);
IkReal x58=(pz*r02);
IkReal x59=(r01*sj0);
IkReal x60=(py*sj0);
IkReal x61=((3.99999494380959)*py);
IkReal x62=((0.000295752124751057)*pz);
IkReal x63=(px*r00);
IkReal x64=(cj0*pz);
IkReal x65=((0.00125509316925568)*pz);
IkReal x66=((0.789366773116777)*pz);
IkReal x67=(px*py);
IkReal x68=((8.0)*pz);
IkReal x69=((0.00111082384010882)*pz);
IkReal x70=(py*r01);
IkReal x71=(pz*sj0);
IkReal x72=((4.0)*pz);
IkReal x73=((2.0)*r02);
IkReal x74=((0.186007625629596)*pz);
IkReal x75=((4.0)*r02);
IkReal x76=((0.000104321437587932)*x59);
IkReal x77=((0.0656109670364354)*x57);
IkReal x78=((0.000104321437587932)*x53);
IkReal x79=((1.50663222908478)*x63);
IkReal x80=((1.50663222908478)*x70);
IkReal x81=((1.50663222908478)*x58);
IkReal x82=((0.0656109670364354)*x56);
IkReal x83=((0.0178346725712003)*x56);
IkReal x84=((0.0178346725712003)*x57);
IkReal x85=((2.83571293882084e-5)*x59);
IkReal x86=((0.186007860752386)*x63);
IkReal x87=((0.186007860752386)*x70);
IkReal x88=((0.186007860752386)*x58);
IkReal x89=((2.83571293882084e-5)*x53);
IkReal x90=((0.000957883123832061)*x56);
IkReal x91=((0.000957883123832061)*x57);
IkReal x92=((1.52303416689298e-6)*x59);
IkReal x93=((1.52303416689298e-6)*x53);
IkReal x94=((0.0186322290847838)*x58);
IkReal x95=((0.0186322290847838)*x70);
IkReal x96=((0.00358386969777419)*x57);
IkReal x97=((5.69835281946096e-6)*x53);
IkReal x98=((5.69835281946096e-6)*x59);
IkReal x99=((0.0186322290847838)*x63);
IkReal x100=((0.00358386969777419)*x56);
IkReal x101=((0.00635999196065724)*x47);
IkReal x102=((0.00317999598032862)*x46);
IkReal x103=((1.99999747190479)*x48);
IkReal x104=((1.99999747190479)*x47);
IkReal x105=((3.99999494380959)*x47);
IkReal x106=(cj0*py*r02);
IkReal x107=((0.00317999598032862)*x48);
IkReal x108=((3.99999494380959)*x46);
IkReal x109=((0.00317999598032862)*x47);
IkReal x110=(r02*x47);
IkReal x111=((3.99999494380959)*x48);
IkReal x112=((1.99999747190479)*x46);
IkReal x113=((0.00635999196065724)*x48);
IkReal x114=((0.00635999196065724)*x46);
IkReal x115=(x70*x72);
IkReal x116=(x57*x74);
IkReal x117=(x53*x62);
IkReal x118=(x47*x73);
IkReal x119=(x63*x72);
IkReal x120=((0.186007625629596)*sj0*x54);
IkReal x121=(x59*x62);
IkReal x122=((0.000295752124751057)*cj0*x54);
IkReal x123=((0.000295752124751057)*r02*x60);
IkReal x124=(x56*x74);
IkReal x125=((0.186007625629596)*x106);
IkReal x126=(x48*x73);
IkReal x127=(x46*x73);
IkReal x128=((0.00125509316925568)*cj0*x54);
IkReal x129=((0.00125509316925568)*r02*x60);
IkReal x130=(x56*x66);
IkReal x131=((0.789366773116777)*x106);
IkReal x132=(x57*x66);
IkReal x133=(x59*x65);
IkReal x134=((0.789366773116777)*sj0*x54);
IkReal x135=(x53*x65);
IkReal x136=(x63*x68);
IkReal x137=(x68*x70);
IkReal x138=(x47*x75);
IkReal x139=(x46*x75);
IkReal x140=(x48*x75);
IkReal x141=((0.00111082384010882)*r02*x60);
IkReal x142=(pz*r00*x55);
IkReal x143=((0.698631345980389)*x106);
IkReal x144=((0.00111082384010882)*cj0*x54);
IkReal x145=(x53*x69);
IkReal x146=(x54*x55);
IkReal x147=((0.698631345980389)*pz*x57);
IkReal x148=(x59*x69);
IkReal x149=((0.00635999196065724)*x54*x64);
IkReal x150=(x103*x56);
IkReal x151=((0.00635999196065724)*x57*x67);
IkReal x152=(px*x53*x61);
IkReal x153=((0.00635999196065724)*x56*x67);
IkReal x154=(x104*x56);
IkReal x155=(x107*x59);
IkReal x156=((0.00635999196065724)*x58*x60);
IkReal x157=(x102*x53);
IkReal x158=(x103*x57);
IkReal x159=(cj0*x58*x61);
IkReal x160=(x104*x57);
IkReal x161=(x107*x53);
IkReal x162=(px*x59*x61);
IkReal x163=(x112*x56);
IkReal x164=(x109*x59);
IkReal x165=(x112*x57);
IkReal x166=(x109*x53);
IkReal x167=((3.99999494380959)*x54*x71);
IkReal x168=(x102*x59);
IkReal x169=((0.0127199839213145)*x56*x67);
IkReal x170=((0.0127199839213145)*x58*x60);
IkReal x171=(x111*x56);
IkReal x172=(x113*x59);
IkReal x173=((0.0127199839213145)*x54*x64);
IkReal x174=(x114*x53);
IkReal x175=((7.99998988761917)*cj0*py*x58);
IkReal x176=((7.99998988761917)*x53*x67);
IkReal x177=((0.0127199839213145)*x57*x67);
IkReal x178=(x105*x56);
IkReal x179=(x111*x57);
IkReal x180=((7.99998988761917)*x54*x71);
IkReal x181=(x108*x57);
IkReal x182=(x105*x57);
IkReal x183=(x108*x56);
IkReal x184=((7.99998988761917)*x59*x67);
IkReal x185=(x113*x53);
IkReal x186=(x101*x59);
IkReal x187=(x114*x59);
IkReal x188=(x101*x53);
IkReal x189=(x51+x90);
IkReal x190=(x140+x139);
IkReal x191=(x99+x95+x94);
IkReal x192=(x79+x80+x81);
IkReal x193=(x91+x93+x92);
IkReal x194=(x88+x86+x87);
IkReal x195=(x77+x76+x78+x49);
IkReal x196=(x126+x127+x82);
IkReal x197=(x50+x89+x84+x85);
IkReal x198=(x137+x136+x138);
IkReal x199=(x115+x119+x118);
IkReal x200=(x145+x146+x147+x148);
IkReal x201=(x124+x125+x122+x123);
IkReal x202=(x135+x134+x133+x132);
IkReal x203=(x131+x130+x128+x129);
IkReal x204=(x141+x142+x143+x144);
IkReal x205=(x120+x121+x117+x116);
IkReal x206=(x126+x127+x52+x98+x97+x96);
IkReal x207=(x199+x205);
IkReal x208=((((-0.0356693902302078)*r02))+(((0.131221934072871)*x57))+(((0.000208642875175865)*x53))+(((0.000208642875175865)*x59))+(((-1.0)*x190))+x198+(((-0.131221934072871)*x56)));
IkReal x209=((((-0.00716773939554838)*x57))+(((-1.0)*x190))+x198+(((-0.00191576866928692)*r02))+(((-1.13967056389219e-5)*x53))+(((-1.13967056389219e-5)*x59))+(((0.00716773939554838)*x56)));
IkReal x210=(x184+x185+x186+x187+x180+x181+x182+x183+x188);
IkReal x211=(x168+x162+x163+x160+x161+x166+x167+x164+x165);
IkReal x212=(x157+x156+x155+x154+x153+x152+x151+x150+x159+x158+x149);
IkReal x213=(x179+x178+x171+x170+x173+x172+x175+x174+x177+x176+x169);
IkReal x214=((((-1.0)*x199))+(((-1.0)*x195))+x192+x196+(((-1.0)*x201))+x205);
IkReal x215=((((-1.0)*x196))+x192+x195+(((-1.0)*x201))+x207);
IkReal x216=(x100+x191+(((-1.0)*x206))+(((-1.0)*x201))+x207);
IkReal x217=((((-0.000861261540857007)*x59))+(((-0.000861261540857007)*x53))+(((-0.5416739250673)*x57))+(((0.131222099943852)*r02))+(((0.5416739250673)*x56))+x210+(((-1.0)*x213)));
IkReal x218=((((0.0257237361532188)*x56))+x213+(((0.00716774845592364)*r02))+(((-0.0257237361532188)*x57))+(((-1.0)*x210))+(((-4.09007404836179e-5)*x59))+(((-4.09007404836179e-5)*x53)));
IkReal x219=((((-1.0)*x194))+x197+(((-1.0)*x202))+x211+x203+(((-1.0)*x212))+(((-1.0)*x83)));
IkReal x220=((((-1.0)*x194))+(((-1.0)*x197))+(((-1.0)*x202))+x212+x203+x83+(((-1.0)*x211)));
IkReal x221=((((-1.0)*x189))+x193+x194+(((-1.0)*x200))+x211+x204+(((-1.0)*x212)));
IkReal x222=((((-1.0)*x193))+x194+x189+(((-1.0)*x200))+x212+x204+(((-1.0)*x211)));
IkReal gconst40=x214;
IkReal gconst41=x217;
IkReal gconst42=x215;
IkReal gconst43=x219;
IkReal gconst44=x208;
IkReal gconst45=x220;
IkReal gconst46=x214;
IkReal gconst47=x217;
IkReal gconst48=x215;
IkReal gconst49=x219;
IkReal gconst50=x208;
IkReal gconst51=x220;
IkReal gconst52=x221;
IkReal gconst53=x209;
IkReal gconst54=x222;
IkReal gconst55=x216;
IkReal gconst56=x218;
IkReal gconst57=((((-1.0)*x100))+(((-1.0)*x199))+x191+(((-1.0)*x201))+x206+x205);
IkReal gconst58=x221;
IkReal gconst59=x209;
IkReal gconst60=x222;
IkReal gconst61=x216;
IkReal gconst62=x218;
IkReal x223=((0.000295752124751057)*r02);
IkReal x224=(pz*r01);
IkReal x225=((2.0)*r02);
IkReal x226=(r00*sj0);
IkReal x227=(cj0*r00);
IkReal x228=(px*r00);
IkReal x229=((0.186007625629596)*cj0);
IkReal gconst63=(((x224*x229))+(((0.0128618843346435)*r02))+(((-1.0)*x225*(pz*pz)))+(((-4.0)*py*x224))+(((-4.0)*pz*x228))+(((-0.00358386969777419)*x226))+(((-1.0)*py*r02*x229))+(((5.69835281946096e-6)*x227))+(((-0.186007625629596)*pz*x226))+(((0.0186322290847838)*pz*r02))+(((0.0186322290847838)*py*r01))+((x225*(py*py)))+(((-1.0)*py*sj0*x223))+(((0.0186322290847838)*x228))+(((0.000295752124751057)*sj0*x224))+(((0.00358386969777419)*cj0*r01))+(((5.69835281946096e-6)*r01*sj0))+(((0.186007625629596)*px*r02*sj0))+(((0.000295752124751057)*pz*x227))+((x225*(px*px)))+(((-1.0)*cj0*px*x223)));
IkReal x230=(gconst42*gconst43);
IkReal x231=(gconst45*gconst46);
IkReal x232=((1.0)*gconst52);
IkReal x233=(gconst46*gconst57);
IkReal x234=(gconst41*gconst62);
IkReal x235=(gconst53*gconst57);
IkReal x236=(gconst50*gconst58);
IkReal x237=(gconst54*gconst55);
IkReal x238=((1.0)*gconst59);
IkReal x239=(gconst48*gconst61);
IkReal x240=(gconst40*gconst57);
IkReal x241=(gconst50*gconst53);
IkReal x242=(gconst43*gconst54);
IkReal x243=(gconst46*gconst51);
IkReal x244=(gconst42*gconst47);
IkReal x245=(gconst56*gconst61);
IkReal x246=(gconst41*gconst45);
IkReal x247=(gconst45*gconst53);
IkReal x248=((1.0)*gconst60);
IkReal x249=(gconst42*gconst55);
IkReal x250=(gconst44*gconst49);
IkReal x251=(gconst54*gconst59);
IkReal x252=((1.0)*gconst54);
IkReal x253=(gconst46*gconst62);
IkReal x254=((1.0)*gconst40);
IkReal x255=(gconst41*gconst50);
IkReal x256=(gconst46*gconst63);
IkReal x257=(gconst58*gconst63);
IkReal x258=(gconst58*gconst62);
IkReal x259=(gconst45*gconst52);
IkReal x260=(gconst48*gconst49);
IkReal x261=(gconst51*gconst58);
IkReal x262=(gconst49*gconst60);
IkReal x263=(gconst41*gconst57);
IkReal x264=(gconst42*gconst59);
IkReal x265=(gconst49*gconst56);
IkReal x266=(gconst44*gconst61);
IkReal x267=(gconst46*gconst50);
IkReal x268=(gconst52*gconst57);
IkReal x269=(gconst47*gconst54);
IkReal x270=(gconst40*gconst45);
IkReal x271=(gconst60*gconst61);
IkReal x272=(gconst53*gconst62);
IkReal x273=((1.0)*x260);
IkReal x274=((1.0)*gconst42*gconst56);
IkReal x275=((1.0)*gconst47*gconst61);
IkReal x276=((1.0)*gconst42*gconst44);
IkReal x277=((1.0)*gconst47*gconst49);
op[0]=(((x245*x251))+((x235*x258))+(((-1.0)*gconst61*x237*x248))+(((-1.0)*gconst56*x252*x258))+(((-1.0)*gconst61*x235*x238))+((x237*x257))+(((-1.0)*gconst57*x232*x257))+((x268*x271)));
op[1]=((((-1.0)*x240*x257))+(((-1.0)*gconst49*x235*x238))+((gconst57*gconst58*x234))+((x242*x257))+((x240*x271))+((x249*x257))+((x233*x272))+((x259*x271))+(((-1.0)*gconst61*x238*x263))+(((-1.0)*gconst49*x237*x248))+((x237*x261))+(((-1.0)*gconst63*x232*x233))+((x262*x268))+(((-1.0)*x258*x274))+(((-1.0)*gconst61*x238*x247))+(((-1.0)*gconst57*x232*x261))+(((-1.0)*x237*x239))+((x239*x268))+((x235*x236))+(((-1.0)*gconst44*x252*x258))+(((-1.0)*x235*x275))+(((-1.0)*gconst56*x252*x253))+(((-1.0)*gconst45*x232*x257))+(((-1.0)*gconst56*x236*x252))+((x237*x256))+(((-1.0)*gconst61*x242*x248))+((x245*x264))+((x245*x269))+((x251*x265))+((x251*x266))+(((-1.0)*gconst61*x248*x249))+((x247*x258)));
op[2]=((((-1.0)*gconst63*x231*x232))+((x242*x256))+((x266*x269))+(((-1.0)*gconst63*x233*x254))+(((-1.0)*x263*x275))+((x233*x241))+((x240*x262))+((x249*x256))+((x259*x262))+((x260*x268))+((x236*x263))+(((-1.0)*gconst45*x232*x261))+(((-1.0)*gconst44*x236*x252))+((x237*x243))+(((-1.0)*gconst45*x254*x257))+((x236*x247))+(((-1.0)*x258*x276))+((x233*x234))+((x264*x266))+((x264*x265))+(((-1.0)*gconst61*x238*x246))+(((-1.0)*x237*x273))+(((-1.0)*gconst51*x232*x233))+((x244*x245))+(((-1.0)*x236*x274))+(((-1.0)*gconst61*x230*x248))+((x250*x251))+((x270*x271))+((x239*x240))+(((-1.0)*x253*x274))+(((-1.0)*x240*x261))+(((-1.0)*gconst44*x252*x253))+(((-1.0)*gconst56*x252*x267))+((x231*x272))+(((-1.0)*x235*x277))+((gconst45*gconst58*x234))+((x242*x261))+((x249*x261))+(((-1.0)*gconst49*x248*x249))+(((-1.0)*gconst49*x238*x247))+((x230*x257))+((x265*x269))+(((-1.0)*x247*x275))+(((-1.0)*x239*x249))+(((-1.0)*x239*x242))+(((-1.0)*gconst49*x242*x248))+(((-1.0)*gconst49*x238*x263))+((x239*x259)));
op[3]=((((-1.0)*x242*x273))+(((-1.0)*x263*x277))+((x240*x260))+((x230*x261))+(((-1.0)*x230*x239))+((x259*x260))+(((-1.0)*gconst63*x231*x254))+(((-1.0)*x249*x273))+(((-1.0)*gconst51*x233*x254))+((x236*x246))+((x244*x265))+((x244*x266))+(((-1.0)*x236*x276))+((x262*x270))+((x239*x270))+(((-1.0)*gconst51*x231*x232))+(((-1.0)*gconst44*x252*x267))+(((-1.0)*x253*x276))+((x231*x241))+((x242*x243))+((x250*x269))+((x250*x264))+((x233*x255))+(((-1.0)*gconst45*x254*x261))+(((-1.0)*x267*x274))+(((-1.0)*gconst49*x238*x246))+((x230*x256))+((x231*x234))+(((-1.0)*x246*x275))+(((-1.0)*x247*x277))+((x243*x249))+(((-1.0)*gconst49*x230*x248)));
op[4]=(((x230*x243))+((x260*x270))+(((-1.0)*x230*x273))+(((-1.0)*gconst51*x231*x254))+(((-1.0)*x267*x276))+(((-1.0)*x246*x277))+((x231*x255))+((x244*x250)));
polyroots4(op,zeror,numroots);
IkReal j2array[4], cj2array[4], sj2array[4], tempj2array[1];
int numsolutions = 0;
for(int ij2 = 0; ij2 < numroots; ++ij2)
{
IkReal htj2 = zeror[ij2];
tempj2array[0]=((2.0)*(atan(htj2)));
for(int kj2 = 0; kj2 < 1; ++kj2)
{
j2array[numsolutions] = tempj2array[kj2];
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
numsolutions++;
}
}
bool j2valid[4]={true,true,true,true};
_nj2 = 4;
for(int ij2 = 0; ij2 < numsolutions; ++ij2)
    {
if( !j2valid[ij2] )
{
    continue;
}
    j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
htj2 = IKtan(j2/2);

_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < numsolutions; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
{
IkReal j1array[1], cj1array[1], sj1array[1];
bool j1valid[1]={false};
_nj1 = 1;
CheckValue<IkReal> x278=IKPowWithIntegerCheck(IKsign(((((((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((-5.21607187939662e-5)*r01*sj0))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-5.21607187939662e-5)*cj0*cj2*r00))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((-0.000478941561916031)*r00*sj0*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((7.61517083446489e-7)*r01*sj0*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-5.21607187939662e-5)*cj0*r00))+((cj2*r02*(py*py)))+(((0.0328054835182177)*r00*sj0))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((-5.21607187939662e-5)*cj2*r01*sj0))+(((0.000478941561916031)*cj0*r01*sj2))+(((-0.135418652442448)*r02))+(((-0.0328054835182177)*cj0*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((7.61517083446489e-7)*cj0*r00*sj2))+(((0.0328054835182177)*cj2*r00*sj0))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*py*pz*r01))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-0.135418652442448)*cj2*r02))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.0328054835182177)*cj0*cj2*r01))+(((-1.0)*r02*(pz*pz)))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))))*(((((0.0328054835182177)*cj0*r01*sj2))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((-1.99999747190479)*px*py*r01*sj0))+(((-0.0328054835182177)*r00*sj0*sj2))+(((0.999998735952397)*r00*sj0*(pz*pz)))+(((0.0064309340383047)*r00*sj0))+(((1.99999747190479)*cj0*px*py*r00))+(((-0.00891734755755194)*r02*sj2))+(((0.0064309340383047)*cj0*cj2*r01))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((0.00317999598032862)*py*pz*r02*sj0))+(((-0.999998735952397)*r00*sj0*(px*px)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((1.02251851209045e-5)*cj0*cj2*r00))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+(((0.00158999799016431)*r01*sj0*(py*py)))+((r02*sj2*(pz*pz)))+(((-0.00158999799016431)*r01*sj0*(px*px)))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00158999799016431)*cj0*r00*(py*py)))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*py*r01))+(((2.0)*py*pz*r01*sj2))+(((0.999998735952397)*r00*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*pz*r02))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-1.02251851209045e-5)*cj0*r00))+(((-0.0064309340383047)*cj2*r00*sj0))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((-0.999998735952397)*cj0*r01*(px*px)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-0.999998735952397)*cj0*r01*(pz*pz)))+(((5.21607187939662e-5)*cj0*r00*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00158999799016431)*cj0*r00*(pz*pz)))+(((0.999998735952397)*cj0*r01*(py*py)))+(((0.00317999598032862)*px*py*r00*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((5.21607187939662e-5)*r01*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((1.99999747190479)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((-1.02251851209045e-5)*r01*sj0))+(((2.0)*px*pz*r00*sj2))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((-1.99999747190479)*px*pz*r02*sj0))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((-0.0064309340383047)*cj0*r01))+(((1.99999747190479)*cj2*px*py*r01*sj0))+(((1.02251851209045e-5)*cj2*r01*sj0))))))+(((((((1.99999747190479)*cj0*py*pz*r02*sj2))+(((2.84917640973048e-6)*cj0*r00))+(((0.00317999598032862)*px*py*r00*sj0*sj2))+(((-2.84917640973048e-6)*cj2*r01*sj0))+(((1.0)*cj2*r02*(pz*pz)))+(((0.0017919348488871)*cj2*r00*sj0))+(((-0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-1.41785646941042e-5)*r01*sj0*sj2))+(((-0.999998735952397)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(px*px)))+(((0.0017919348488871)*cj0*r01))+(((0.00317999598032862)*py*pz*r02*sj0*sj2))+(((1.0)*r02*(py*py)))+(((-0.0017919348488871)*cj0*cj2*r01))+(((-1.99999747190479)*px*py*r01*sj0*sj2))+(((-0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-1.41785646941042e-5)*cj0*r00*sj2))+(((2.0)*cj2*px*pz*r00))+(((0.00643094216732173)*r02))+(((-0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((2.84917640973048e-6)*r01*sj0))+(((-0.0017919348488871)*r00*sj0))+(((0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.00643094216732173)*cj2*r02))+(((-0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((0.00891733628560013)*r00*sj0*sj2))+(((1.0)*r02*(px*px)))+(((2.0)*cj2*py*pz*r01))+(((0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((0.00317999598032862)*cj0*px*py*r01*sj2))+(((-0.0328055249859629)*r02*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj2*r02*(py*py)))+(((-2.0)*px*pz*r00))+(((-0.00891733628560013)*cj0*r01*sj2))+(((-2.84917640973048e-6)*cj0*cj2*r00))+(((1.99999747190479)*cj0*px*py*r00*sj2))+(((0.00317999598032862)*cj0*px*pz*r02*sj2))+(((0.999998735952397)*r00*sj0*sj2*(pz*pz)))+(((-0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-1.99999747190479)*px*pz*r02*sj0*sj2))+(((-2.0)*py*pz*r01))+(((-1.0)*r02*(pz*pz)))))*(((((0.999998735952397)*cj0*r01*(pz*pz)))+(((-0.000215315385214252)*r01*sj0))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.999998735952397)*r00*sj0*(pz*pz)))+(((0.999998735952397)*cj0*r01*(px*px)))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((-2.84917640973048e-6)*cj0*r00*sj2))+(((-0.00158999799016431)*r01*sj0*(py*py)))+(((-0.999998735952397)*cj0*r01*(py*py)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-1.99999747190479)*cj0*px*py*r00))+(((-0.00317999598032862)*px*py*r00*sj0))+(((-1.99999747190479)*cj0*py*pz*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((0.999998735952397)*r00*sj0*(px*px)))+(((1.99999747190479)*px*py*r01*sj0))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.135418481266825)*cj2*r00*sj0))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((-0.999998735952397)*r00*sj0*(py*py)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*py*r01))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.135418481266825)*cj0*r01))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00158999799016431)*cj0*r00*(py*py)))+(((-0.135418481266825)*cj0*cj2*r01))+(((2.0)*py*pz*r01*sj2))+(((-0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-2.84917640973048e-6)*r01*sj0*sj2))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-0.000215315385214252)*cj0*r00))+(((-0.0017919348488871)*cj0*r01*sj2))+(((1.99999747190479)*px*pz*r02*sj0))+(((-0.000215315385214252)*cj0*cj2*r00))+(((-0.000478942167321729)*r02*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0))+(((-0.000215315385214252)*cj2*r01*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((0.0328055249859629)*r02))+(((0.0017919348488871)*r00*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((0.00158999799016431)*cj0*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((0.00158999799016431)*r01*sj0*(px*px)))+(((0.135418481266825)*r00*sj0))+(((1.99999747190479)*cj2*px*py*r01*sj0)))))))),-1);
if(!x278.valid){
continue;
}
CheckValue<IkReal> x279 = IKatan2WithCheck(IkReal(((((((((0.0930039303761931)*pz*r02*sj2))+(((-0.0930038128147979)*cj2*pz*r00*sj0))+(((-0.394683386558389)*cj0*py*r02*sj2))+(((0.000147876062375529)*cj0*px*r02))+(((0.394683386558389)*px*r02*sj0*sj2))+(((0.00931611454239191)*cj2*pz*r02))+(((-0.000147876062375529)*pz*r01*sj0))+(((-0.394683386558389)*pz*r00*sj0*sj2))+(((0.00931611454239191)*cj2*px*r00))+(((0.0930039303761931)*py*r01*sj2))+(((-0.0930038128147979)*cj0*cj2*py*r02))+(((0.0930039303761931)*px*r00*sj2))+(((0.000147876062375529)*py*r02*sj0))+(((-0.000147876062375529)*cj0*cj2*px*r02))+(((-0.000627546584627838)*cj0*px*r02*sj2))+(((0.0930038128147979)*pz*r00*sj0))+(((-0.00931611454239191)*px*r00))+(((0.000147876062375529)*cj2*pz*r01*sj0))+(((-0.000147876062375529)*cj2*py*r02*sj0))+(((-0.0930038128147979)*cj0*pz*r01))+(((-0.000627546584627838)*py*r02*sj0*sj2))+(((0.394683386558389)*cj0*pz*r01*sj2))+(((0.000627546584627838)*cj0*pz*r00*sj2))+(((0.0930038128147979)*cj2*px*r02*sj0))+(((-0.00931611454239191)*pz*r02))+(((0.000147876062375529)*cj0*cj2*pz*r00))+(((-0.00931611454239191)*py*r01))+(((-0.0930038128147979)*px*r02*sj0))+(((0.000627546584627838)*pz*r01*sj0*sj2))+(((0.0930038128147979)*cj0*py*r02))+(((-0.000147876062375529)*cj0*pz*r00))+(((0.00931611454239191)*cj2*py*r01))+(((0.0930038128147979)*cj0*cj2*pz*r01))))*(((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((-5.21607187939662e-5)*r01*sj0))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-5.21607187939662e-5)*cj0*cj2*r00))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((-0.000478941561916031)*r00*sj0*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((7.61517083446489e-7)*r01*sj0*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-5.21607187939662e-5)*cj0*r00))+((cj2*r02*(py*py)))+(((0.0328054835182177)*r00*sj0))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((-5.21607187939662e-5)*cj2*r01*sj0))+(((0.000478941561916031)*cj0*r01*sj2))+(((-0.135418652442448)*r02))+(((-0.0328054835182177)*cj0*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((7.61517083446489e-7)*cj0*r00*sj2))+(((0.0328054835182177)*cj2*r00*sj0))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*py*pz*r01))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-0.135418652442448)*cj2*r02))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.0328054835182177)*cj0*cj2*r01))+(((-1.0)*r02*(pz*pz)))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))))))+(((((((0.753316114542392)*py*r01))+(((0.0930039303761931)*pz*r02*sj2))+(((-0.0930038128147979)*cj2*pz*r00*sj0))+(((0.000555411920054409)*py*r02*sj0*sj2))+(((-0.0930038128147979)*pz*r00*sj0))+(((-0.000555411920054409)*pz*r01*sj0*sj2))+(((0.753316114542392)*pz*r02))+(((0.0930038128147979)*px*r02*sj0))+(((0.0930039303761931)*py*r01*sj2))+(((-0.0930038128147979)*cj0*cj2*py*r02))+(((0.753316114542392)*cj2*pz*r02))+(((0.753316114542392)*px*r00))+(((0.0930039303761931)*px*r00*sj2))+(((-0.000147876062375529)*cj0*cj2*px*r02))+(((0.000147876062375529)*pz*r01*sj0))+(((0.000147876062375529)*cj2*pz*r01*sj0))+(((0.753316114542392)*cj2*py*r01))+(((0.000147876062375529)*cj0*pz*r00))+(((-0.000555411920054409)*cj0*pz*r00*sj2))+(((-0.000147876062375529)*cj2*py*r02*sj0))+(((-0.349315672990195)*px*r02*sj0*sj2))+(((0.753316114542392)*cj2*px*r00))+(((0.0930038128147979)*cj0*pz*r01))+(((0.349315672990195)*pz*r00*sj0*sj2))+(((0.0930038128147979)*cj2*px*r02*sj0))+(((0.000555411920054409)*cj0*px*r02*sj2))+(((-0.000147876062375529)*cj0*px*r02))+(((-0.000147876062375529)*py*r02*sj0))+(((-0.0930038128147979)*cj0*py*r02))+(((0.349315672990195)*cj0*py*r02*sj2))+(((0.000147876062375529)*cj0*cj2*pz*r00))+(((-0.349315672990195)*cj0*pz*r01*sj2))+(((0.0930038128147979)*cj0*cj2*pz*r01))))*(((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-0.0017919348488871)*cj0*r01))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((2.0)*px*pz*r00))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-0.00643094216732173)*r02))+(((1.41785646941042e-5)*cj0*r00*sj2))+((cj2*r02*(py*py)))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((cj2*r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((2.84917640973048e-6)*cj2*r01*sj0))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((0.00643094216732173)*cj2*r02))+(((-0.00891733628560013)*r00*sj0*sj2))+(((0.0017919348488871)*r00*sj0))+(((-2.84917640973048e-6)*r01*sj0))+(((0.0017919348488871)*cj0*cj2*r01))+(((-0.0017919348488871)*cj2*r00*sj0))+(((1.41785646941042e-5)*r01*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.84917640973048e-6)*cj0*cj2*r00))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-2.84917640973048e-6)*cj0*r00))+(((0.00891733628560013)*cj0*r01*sj2))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))+((r02*(pz*pz))))))))),IkReal(((((((((0.0930038128147979)*cj0*cj2*py*r02))+(((-0.000555411920054409)*py*r02*sj0*sj2))+(((0.349315672990195)*cj0*pz*r01*sj2))+(((-0.000147876062375529)*cj2*pz*r01*sj0))+(((0.000147876062375529)*cj0*px*r02))+(((-0.349315672990195)*cj0*py*r02*sj2))+(((-0.753316114542392)*cj2*py*r01))+(((-0.753316114542392)*cj2*px*r00))+(((-0.000147876062375529)*cj0*cj2*pz*r00))+(((-0.000147876062375529)*pz*r01*sj0))+(((0.0930038128147979)*cj2*pz*r00*sj0))+(((0.000147876062375529)*py*r02*sj0))+(((-0.753316114542392)*px*r00))+(((-0.753316114542392)*cj2*pz*r02))+(((-0.0930038128147979)*cj0*cj2*pz*r01))+(((0.0930038128147979)*pz*r00*sj0))+(((-0.0930038128147979)*cj2*px*r02*sj0))+(((0.000555411920054409)*pz*r01*sj0*sj2))+(((-0.000555411920054409)*cj0*px*r02*sj2))+(((-0.0930038128147979)*cj0*pz*r01))+(((0.000555411920054409)*cj0*pz*r00*sj2))+(((0.349315672990195)*px*r02*sj0*sj2))+(((-0.349315672990195)*pz*r00*sj0*sj2))+(((-0.753316114542392)*pz*r02))+(((-0.0930039303761931)*pz*r02*sj2))+(((0.000147876062375529)*cj0*cj2*px*r02))+(((0.000147876062375529)*cj2*py*r02*sj0))+(((-0.0930038128147979)*px*r02*sj0))+(((0.0930038128147979)*cj0*py*r02))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.000147876062375529)*cj0*pz*r00))+(((-0.0930039303761931)*px*r00*sj2))+(((-0.753316114542392)*py*r01))))*(((((0.0328054835182177)*cj0*r01*sj2))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((-1.99999747190479)*px*py*r01*sj0))+(((-0.0328054835182177)*r00*sj0*sj2))+(((0.999998735952397)*r00*sj0*(pz*pz)))+(((0.0064309340383047)*r00*sj0))+(((1.99999747190479)*cj0*px*py*r00))+(((-0.00891734755755194)*r02*sj2))+(((0.0064309340383047)*cj0*cj2*r01))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((0.00317999598032862)*py*pz*r02*sj0))+(((-0.999998735952397)*r00*sj0*(px*px)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((1.02251851209045e-5)*cj0*cj2*r00))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+(((0.00158999799016431)*r01*sj0*(py*py)))+((r02*sj2*(pz*pz)))+(((-0.00158999799016431)*r01*sj0*(px*px)))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00158999799016431)*cj0*r00*(py*py)))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*py*r01))+(((2.0)*py*pz*r01*sj2))+(((0.999998735952397)*r00*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*pz*r02))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-1.02251851209045e-5)*cj0*r00))+(((-0.0064309340383047)*cj2*r00*sj0))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((-0.999998735952397)*cj0*r01*(px*px)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-0.999998735952397)*cj0*r01*(pz*pz)))+(((5.21607187939662e-5)*cj0*r00*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00158999799016431)*cj0*r00*(pz*pz)))+(((0.999998735952397)*cj0*r01*(py*py)))+(((0.00317999598032862)*px*py*r00*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((5.21607187939662e-5)*r01*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((1.99999747190479)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((-1.02251851209045e-5)*r01*sj0))+(((2.0)*px*pz*r00*sj2))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((-1.99999747190479)*px*pz*r02*sj0))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((-0.0064309340383047)*cj0*r01))+(((1.99999747190479)*cj2*px*py*r01*sj0))+(((1.02251851209045e-5)*cj2*r01*sj0))))))+(((((((0.0930038128147979)*cj0*cj2*py*r02))+(((-0.394683386558389)*px*r02*sj0*sj2))+(((-0.000147876062375529)*cj2*pz*r01*sj0))+(((-0.0930038128147979)*pz*r00*sj0))+(((-0.000147876062375529)*cj0*cj2*pz*r00))+(((0.0930038128147979)*px*r02*sj0))+(((0.0930038128147979)*cj2*pz*r00*sj0))+(((-0.00931611454239191)*cj2*pz*r02))+(((-0.000627546584627838)*pz*r01*sj0*sj2))+(((0.394683386558389)*pz*r00*sj0*sj2))+(((-0.394683386558389)*cj0*pz*r01*sj2))+(((0.000627546584627838)*py*r02*sj0*sj2))+(((-0.00931611454239191)*cj2*py*r01))+(((-0.0930038128147979)*cj0*cj2*pz*r01))+(((0.000147876062375529)*pz*r01*sj0))+(((-0.0930038128147979)*cj2*px*r02*sj0))+(((-0.00931611454239191)*cj2*px*r00))+(((0.000147876062375529)*cj0*pz*r00))+(((0.00931611454239191)*pz*r02))+(((0.00931611454239191)*py*r01))+(((0.0930038128147979)*cj0*pz*r01))+(((-0.0930039303761931)*pz*r02*sj2))+(((0.394683386558389)*cj0*py*r02*sj2))+(((-0.000147876062375529)*cj0*px*r02))+(((0.000627546584627838)*cj0*px*r02*sj2))+(((-0.000147876062375529)*py*r02*sj0))+(((-0.0930038128147979)*cj0*py*r02))+(((-0.000627546584627838)*cj0*pz*r00*sj2))+(((0.000147876062375529)*cj0*cj2*px*r02))+(((0.000147876062375529)*cj2*py*r02*sj0))+(((0.00931611454239191)*px*r00))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.0930039303761931)*px*r00*sj2))))*(((((0.999998735952397)*cj0*r01*(pz*pz)))+(((-0.000215315385214252)*r01*sj0))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.999998735952397)*r00*sj0*(pz*pz)))+(((0.999998735952397)*cj0*r01*(px*px)))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((-2.84917640973048e-6)*cj0*r00*sj2))+(((-0.00158999799016431)*r01*sj0*(py*py)))+(((-0.999998735952397)*cj0*r01*(py*py)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-1.99999747190479)*cj0*px*py*r00))+(((-0.00317999598032862)*px*py*r00*sj0))+(((-1.99999747190479)*cj0*py*pz*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((0.999998735952397)*r00*sj0*(px*px)))+(((1.99999747190479)*px*py*r01*sj0))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.135418481266825)*cj2*r00*sj0))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((-0.999998735952397)*r00*sj0*(py*py)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*py*r01))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.135418481266825)*cj0*r01))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00158999799016431)*cj0*r00*(py*py)))+(((-0.135418481266825)*cj0*cj2*r01))+(((2.0)*py*pz*r01*sj2))+(((-0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-2.84917640973048e-6)*r01*sj0*sj2))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-0.000215315385214252)*cj0*r00))+(((-0.0017919348488871)*cj0*r01*sj2))+(((1.99999747190479)*px*pz*r02*sj0))+(((-0.000215315385214252)*cj0*cj2*r00))+(((-0.000478942167321729)*r02*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0))+(((-0.000215315385214252)*cj2*r01*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((0.0328055249859629)*r02))+(((0.0017919348488871)*r00*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((0.00158999799016431)*cj0*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((0.00158999799016431)*r01*sj0*(px*px)))+(((0.135418481266825)*r00*sj0))+(((1.99999747190479)*cj2*px*py*r01*sj0)))))))),IKFAST_ATAN2_MAGTHRESH);
if(!x279.valid){
continue;
}
j1array[0]=((-1.5707963267949)+(((1.5707963267949)*(x278.value)))+(x279.value));
sj1array[0]=IKsin(j1array[0]);
cj1array[0]=IKcos(j1array[0]);
if( j1array[0] > IKPI )
{
    j1array[0]-=IK2PI;
}
else if( j1array[0] < -IKPI )
{    j1array[0]+=IK2PI;
}
j1valid[0] = true;
for(int ij1 = 0; ij1 < 1; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 1; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];
{
IkReal evalcond[4];
evalcond[0]=((((0.753316114542392)*py*r01))+(((0.0930039303761931)*pz*r02*sj2))+(((-0.0930038128147979)*cj2*pz*r00*sj0))+(((0.000555411920054409)*py*r02*sj0*sj2))+(((-0.0930038128147979)*pz*r00*sj0))+(((-0.000555411920054409)*pz*r01*sj0*sj2))+(((0.753316114542392)*pz*r02))+(((0.0930038128147979)*px*r02*sj0))+(((0.0930039303761931)*py*r01*sj2))+(((-0.0930038128147979)*cj0*cj2*py*r02))+(((0.753316114542392)*cj2*pz*r02))+(((0.753316114542392)*px*r00))+(((0.0930039303761931)*px*r00*sj2))+(((-0.000147876062375529)*cj0*cj2*px*r02))+(((0.000147876062375529)*pz*r01*sj0))+(((0.000147876062375529)*cj2*pz*r01*sj0))+(((0.753316114542392)*cj2*py*r01))+(((0.000147876062375529)*cj0*pz*r00))+(((-0.000555411920054409)*cj0*pz*r00*sj2))+(((-0.000147876062375529)*cj2*py*r02*sj0))+(((-0.349315672990195)*px*r02*sj0*sj2))+(((0.753316114542392)*cj2*px*r00))+(((0.0930038128147979)*cj0*pz*r01))+(((0.349315672990195)*pz*r00*sj0*sj2))+(((0.0930038128147979)*cj2*px*r02*sj0))+(((0.000555411920054409)*cj0*px*r02*sj2))+(((-0.000147876062375529)*cj0*px*r02))+(((-0.000147876062375529)*py*r02*sj0))+(((-0.0930038128147979)*cj0*py*r02))+(((0.349315672990195)*cj0*py*r02*sj2))+(((0.000147876062375529)*cj0*cj2*pz*r00))+(((((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((-5.21607187939662e-5)*r01*sj0))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-5.21607187939662e-5)*cj0*cj2*r00))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((-0.000478941561916031)*r00*sj0*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((-0.00179193711398091)*r02*sj2))+(((7.61517083446489e-7)*r01*sj0*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-5.21607187939662e-5)*cj0*r00))+((cj2*r02*(py*py)))+(((0.0328054835182177)*r00*sj0))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((r02*(py*py)))+((cj2*r02*(px*px)))+((r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((-5.21607187939662e-5)*cj2*r01*sj0))+(((0.000478941561916031)*cj0*r01*sj2))+(((-0.135418652442448)*r02))+(((-0.0328054835182177)*cj0*r01))+(((-2.0)*cj2*py*pz*r01))+(((-2.0)*px*pz*r00))+(((7.61517083446489e-7)*cj0*r00*sj2))+(((0.0328054835182177)*cj2*r00*sj0))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-2.0)*py*pz*r01))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-0.135418652442448)*cj2*r02))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.0328054835182177)*cj0*cj2*r01))+(((-1.0)*r02*(pz*pz)))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))))*(IKcos(j1))))+(((-0.349315672990195)*cj0*pz*r01*sj2))+(((((((0.999998735952397)*cj0*r01*(pz*pz)))+(((-0.000215315385214252)*r01*sj0))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.999998735952397)*r00*sj0*(pz*pz)))+(((0.999998735952397)*cj0*r01*(px*px)))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((-2.84917640973048e-6)*cj0*r00*sj2))+(((-0.00158999799016431)*r01*sj0*(py*py)))+(((-0.999998735952397)*cj0*r01*(py*py)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-1.99999747190479)*cj0*px*py*r00))+(((-0.00317999598032862)*px*py*r00*sj0))+(((-1.99999747190479)*cj0*py*pz*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((0.999998735952397)*r00*sj0*(px*px)))+(((1.99999747190479)*px*py*r01*sj0))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.135418481266825)*cj2*r00*sj0))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((-0.999998735952397)*r00*sj0*(py*py)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*py*r01))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.135418481266825)*cj0*r01))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00158999799016431)*cj0*r00*(py*py)))+(((-0.135418481266825)*cj0*cj2*r01))+(((2.0)*py*pz*r01*sj2))+(((-0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-2.84917640973048e-6)*r01*sj0*sj2))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-1.0)*r02*sj2*(px*px)))+(((-0.000215315385214252)*cj0*r00))+(((-0.0017919348488871)*cj0*r01*sj2))+(((1.99999747190479)*px*pz*r02*sj0))+(((-0.000215315385214252)*cj0*cj2*r00))+(((-0.000478942167321729)*r02*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0))+(((-0.000215315385214252)*cj2*r01*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((0.0328055249859629)*r02))+(((0.0017919348488871)*r00*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((0.00158999799016431)*cj0*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((0.00158999799016431)*r01*sj0*(px*px)))+(((0.135418481266825)*r00*sj0))+(((1.99999747190479)*cj2*px*py*r01*sj0))))*(IKsin(j1))))+(((0.0930038128147979)*cj0*cj2*pz*r01)));
evalcond[1]=((((-0.0930038128147979)*pz*r00*sj0*sj2))+(((0.753316114542392)*pz*r02*sj2))+(((-0.0930038128147979)*cj0*py*r02*sj2))+(((0.000555411920054409)*cj2*pz*r01*sj0))+(((0.0930038128147979)*cj0*pz*r01*sj2))+(((0.349315672990195)*cj0*py*r02))+(((0.000555411920054409)*cj0*cj2*pz*r00))+(((0.0930039303761931)*py*r01))+(((0.0930038128147979)*px*r02*sj0*sj2))+(((0.349315672990195)*cj0*cj2*pz*r01))+(((-0.000147876062375529)*cj0*px*r02*sj2))+(((0.0930039303761931)*px*r00))+(((-0.0930039303761931)*cj2*pz*r02))+(((0.000147876062375529)*pz*r01*sj0*sj2))+(((-0.000555411920054409)*cj2*py*r02*sj0))+(((-0.000555411920054409)*cj0*pz*r00))+(((0.0930039303761931)*pz*r02))+(((-0.349315672990195)*cj0*pz*r01))+(((0.349315672990195)*pz*r00*sj0))+(((-0.0930039303761931)*cj2*py*r01))+(((-0.349315672990195)*cj2*pz*r00*sj0))+(((-0.349315672990195)*cj0*cj2*py*r02))+(((0.000555411920054409)*cj0*px*r02))+(((((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((0.135418481266825)*r00*sj0*sj2))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-0.0017919348488871)*cj0*r01))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.000478942167321729)*cj2*r02))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((2.0)*px*pz*r00))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+((cj2*r02*(py*py)))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((cj2*r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((2.84917640973048e-6)*cj2*r01*sj0))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((0.0017919348488871)*r00*sj0))+(((-2.84917640973048e-6)*r01*sj0))+(((0.0017919348488871)*cj0*cj2*r01))+(((-0.0017919348488871)*cj2*r00*sj0))+(((-2.0)*cj2*py*pz*r01))+(((-0.000215315385214252)*cj0*r00*sj2))+(((2.84917640973048e-6)*cj0*cj2*r00))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-2.84917640973048e-6)*cj0*r00))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.135418481266825)*cj0*r01*sj2))+(((-0.000478942167321729)*r02))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.000215315385214252)*r01*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))+((r02*(pz*pz)))))*(IKsin(j1))))+(((-0.000147876062375529)*py*r02*sj0*sj2))+(((0.000555411920054409)*py*r02*sj0))+(((((((-0.000478941561916031)*cj0*cj2*r01))+((r02*sj2*(py*py)))+(((0.999998735952397)*cj0*r01*(pz*pz)))+(((1.99999747190479)*cj0*cj2*px*py*r00))+(((0.000478941561916031)*cj0*r01))+(((-1.0)*r02*sj2*(pz*pz)))+(((1.99999747190479)*cj0*cj2*py*pz*r02))+(((0.000478941561916031)*cj2*r00*sj0))+(((0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.999998735952397)*r00*sj0*(pz*pz)))+(((-1.99999747190479)*cj2*px*py*r01*sj0))+(((0.999998735952397)*cj0*r01*(px*px)))+(((-1.99999747190479)*cj2*px*pz*r02*sj0))+(((0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((-5.21607187939662e-5)*cj0*r00*sj2))+(((-0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.00158999799016431)*r01*sj0*(py*py)))+(((-0.999998735952397)*cj0*r01*(py*py)))+(((-0.999998735952397)*cj2*r00*sj0*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((-1.99999747190479)*cj0*px*py*r00))+(((0.00317999598032862)*cj0*cj2*px*pz*r02))+(((-0.00317999598032862)*px*py*r00*sj0))+(((0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((-1.99999747190479)*cj0*py*pz*r02))+(((0.00179193711398091)*cj2*r02))+(((0.999998735952397)*r00*sj0*(px*px)))+(((0.00317999598032862)*cj0*cj2*px*py*r01))+(((1.99999747190479)*px*py*r01*sj0))+(((-0.999998735952397)*r00*sj0*(py*py)))+(((-7.61517083446489e-7)*cj0*cj2*r00))+(((-0.00317999598032862)*cj0*px*py*r01))+(((-0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((0.00158999799016431)*cj0*r00*(py*py)))+(((0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-0.00158999799016431)*cj0*r00*(px*px)))+(((7.61517083446489e-7)*cj0*r00))+(((0.999998735952397)*cj0*cj2*r01*(py*py)))+(((-7.61517083446489e-7)*cj2*r01*sj0))+(((-0.0328054835182177)*cj0*r01*sj2))+(((-2.0)*px*pz*r00*sj2))+(((-2.0)*py*pz*r01*sj2))+(((-0.135418652442448)*r02*sj2))+(((-0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((1.99999747190479)*px*pz*r02*sj0))+((r02*sj2*(px*px)))+(((-0.00317999598032862)*py*pz*r02*sj0))+(((0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-0.000478941561916031)*r00*sj0))+(((-0.999998735952397)*cj0*cj2*r01*(px*px)))+(((-5.21607187939662e-5)*r01*sj0*sj2))+(((0.0328054835182177)*r00*sj0*sj2))+(((-0.00179193711398091)*r02))+(((0.00317999598032862)*cj2*px*py*r00*sj0))+(((0.00158999799016431)*cj0*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*pz*r02))+(((0.00158999799016431)*r01*sj0*(px*px)))+(((7.61517083446489e-7)*r01*sj0))+(((-0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-0.00158999799016431)*cj0*cj2*r00*(py*py)))))*(IKcos(j1))))+(((0.753316114542392)*py*r01*sj2))+(((-0.000555411920054409)*pz*r01*sj0))+(((-0.349315672990195)*px*r02*sj0))+(((0.000147876062375529)*cj0*pz*r00*sj2))+(((-0.000555411920054409)*cj0*cj2*px*r02))+(((0.349315672990195)*cj2*px*r02*sj0))+(((0.753316114542392)*px*r00*sj2))+(((-0.0930039303761931)*cj2*px*r00)));
evalcond[2]=((((0.0930038128147979)*cj0*cj2*py*r02))+(((-0.394683386558389)*px*r02*sj0*sj2))+(((-0.000147876062375529)*cj2*pz*r01*sj0))+(((((((0.0328054835182177)*cj0*r01*sj2))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((-1.99999747190479)*px*py*r01*sj0))+(((-0.0328054835182177)*r00*sj0*sj2))+(((0.999998735952397)*r00*sj0*(pz*pz)))+(((0.0064309340383047)*r00*sj0))+(((1.99999747190479)*cj0*px*py*r00))+(((-0.00891734755755194)*r02*sj2))+(((0.0064309340383047)*cj0*cj2*r01))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((0.00317999598032862)*py*pz*r02*sj0))+(((-0.999998735952397)*r00*sj0*(px*px)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.00179193711398091)*cj2*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((1.02251851209045e-5)*cj0*cj2*r00))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+(((0.00158999799016431)*r01*sj0*(py*py)))+((r02*sj2*(pz*pz)))+(((-0.00158999799016431)*r01*sj0*(px*px)))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00158999799016431)*cj0*r00*(py*py)))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*py*r01))+(((2.0)*py*pz*r01*sj2))+(((0.999998735952397)*r00*sj0*(py*py)))+(((0.00317999598032862)*cj0*px*pz*r02))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-1.02251851209045e-5)*cj0*r00))+(((-0.0064309340383047)*cj2*r00*sj0))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((-0.999998735952397)*cj0*r01*(px*px)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-0.999998735952397)*cj0*r01*(pz*pz)))+(((5.21607187939662e-5)*cj0*r00*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00158999799016431)*cj0*r00*(pz*pz)))+(((0.999998735952397)*cj0*r01*(py*py)))+(((0.00317999598032862)*px*py*r00*sj0))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((5.21607187939662e-5)*r01*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((1.99999747190479)*cj0*py*pz*r02))+(((0.00179193711398091)*r02))+(((-1.02251851209045e-5)*r01*sj0))+(((2.0)*px*pz*r00*sj2))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((-1.99999747190479)*px*pz*r02*sj0))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((-0.0064309340383047)*cj0*r01))+(((1.99999747190479)*cj2*px*py*r01*sj0))+(((1.02251851209045e-5)*cj2*r01*sj0))))*(IKsin(j1))))+(((-0.0930038128147979)*pz*r00*sj0))+(((-0.000147876062375529)*cj0*cj2*pz*r00))+(((0.0930038128147979)*px*r02*sj0))+(((0.0930038128147979)*cj2*pz*r00*sj0))+(((-0.00931611454239191)*cj2*pz*r02))+(((-0.000627546584627838)*pz*r01*sj0*sj2))+(((0.394683386558389)*pz*r00*sj0*sj2))+(((-0.394683386558389)*cj0*pz*r01*sj2))+(((0.000627546584627838)*py*r02*sj0*sj2))+(((-0.00931611454239191)*cj2*py*r01))+(((-0.0930038128147979)*cj0*cj2*pz*r01))+(((0.000147876062375529)*pz*r01*sj0))+(((-0.0930038128147979)*cj2*px*r02*sj0))+(((-0.00931611454239191)*cj2*px*r00))+(((0.000147876062375529)*cj0*pz*r00))+(((0.00931611454239191)*pz*r02))+(((0.00931611454239191)*py*r01))+(((0.0930038128147979)*cj0*pz*r01))+(((-0.0930039303761931)*pz*r02*sj2))+(((((((-0.00317999598032862)*px*py*r00*sj0*sj2))+(((1.99999747190479)*px*pz*r02*sj0*sj2))+(((-0.0017919348488871)*cj0*r01))+(((-0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((-0.00317999598032862)*cj0*px*py*r01*sj2))+(((0.999998735952397)*cj0*r01*sj2*(px*px)))+(((0.0328055249859629)*r02*sj2))+(((-1.0)*cj2*r02*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+(((0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((-0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((2.0)*px*pz*r00))+(((0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-0.00643094216732173)*r02))+(((1.41785646941042e-5)*cj0*r00*sj2))+((cj2*r02*(py*py)))+(((-0.00317999598032862)*cj0*px*pz*r02*sj2))+((cj2*r02*(px*px)))+(((-1.99999747190479)*cj0*py*pz*r02*sj2))+(((2.84917640973048e-6)*cj2*r01*sj0))+(((0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((0.00643094216732173)*cj2*r02))+(((-0.00891733628560013)*r00*sj0*sj2))+(((0.0017919348488871)*r00*sj0))+(((-2.84917640973048e-6)*r01*sj0))+(((0.0017919348488871)*cj0*cj2*r01))+(((-0.0017919348488871)*cj2*r00*sj0))+(((1.41785646941042e-5)*r01*sj0*sj2))+(((-2.0)*cj2*py*pz*r01))+(((2.84917640973048e-6)*cj0*cj2*r00))+(((-2.0)*cj2*px*pz*r00))+(((0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((1.99999747190479)*px*py*r01*sj0*sj2))+(((-2.84917640973048e-6)*cj0*r00))+(((0.00891733628560013)*cj0*r01*sj2))+(((-1.99999747190479)*cj0*px*py*r00*sj2))+(((-0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-0.999998735952397)*r00*sj0*sj2*(pz*pz)))+((r02*(pz*pz)))))*(IKcos(j1))))+(((0.394683386558389)*cj0*py*r02*sj2))+(((-0.000147876062375529)*cj0*px*r02))+(((0.000627546584627838)*cj0*px*r02*sj2))+(((-0.000147876062375529)*py*r02*sj0))+(((-0.0930038128147979)*cj0*py*r02))+(((-0.000627546584627838)*cj0*pz*r00*sj2))+(((0.000147876062375529)*cj0*cj2*px*r02))+(((0.000147876062375529)*cj2*py*r02*sj0))+(((0.00931611454239191)*px*r00))+(((-0.0930039303761931)*py*r01*sj2))+(((-0.0930039303761931)*px*r00*sj2)));
evalcond[3]=((((-0.0930038128147979)*pz*r00*sj0*sj2))+(((-0.0930038128147979)*cj0*py*r02*sj2))+(((0.0930038128147979)*cj0*pz*r01*sj2))+(((-0.000627546584627838)*cj0*pz*r00))+(((0.394683386558389)*pz*r00*sj0))+(((0.000627546584627838)*cj0*px*r02))+(((0.0930038128147979)*px*r02*sj0*sj2))+(((-0.394683386558389)*cj0*pz*r01))+(((-0.000147876062375529)*cj0*px*r02*sj2))+(((-0.0930039303761931)*cj2*pz*r02))+(((0.000147876062375529)*pz*r01*sj0*sj2))+(((-0.000627546584627838)*pz*r01*sj0))+(((-0.000627546584627838)*cj0*cj2*pz*r00))+(((-0.394683386558389)*cj0*cj2*pz*r01))+(((((((5.21607187939662e-5)*cj2*r01*sj0))+(((1.99999747190479)*cj0*py*pz*r02*sj2))+(((0.00317999598032862)*px*py*r00*sj0*sj2))+(((5.21607187939662e-5)*r01*sj0))+(((-1.02251851209045e-5)*cj0*r00*sj2))+(((-0.00891734755755194)*cj2*r02))+(((-0.0328054835182177)*cj2*r00*sj0))+(((-1.02251851209045e-5)*r01*sj0*sj2))+(((-0.00158999799016431)*r01*sj0*sj2*(px*px)))+(((0.0064309340383047)*r00*sj0*sj2))+(((2.0)*px*pz*r00))+(((-0.999998735952397)*cj0*r01*sj2*(px*px)))+(((-1.0)*cj2*r02*(px*px)))+(((0.00317999598032862)*py*pz*r02*sj0*sj2))+(((-1.99999747190479)*px*py*r01*sj0*sj2))+(((-0.00158999799016431)*r01*sj0*sj2*(pz*pz)))+((cj2*r02*(pz*pz)))+(((0.00158999799016431)*cj0*r00*sj2*(px*px)))+(((2.0)*cj2*px*pz*r00))+(((-0.0064309340383047)*cj0*r01*sj2))+(((-0.999998735952397)*cj0*r01*sj2*(pz*pz)))+(((-0.00891734755755194)*r02))+(((0.999998735952397)*r00*sj0*sj2*(py*py)))+(((-0.00158999799016431)*cj0*r00*sj2*(py*py)))+(((2.0)*cj2*py*pz*r01))+(((0.00158999799016431)*r01*sj0*sj2*(py*py)))+(((0.00317999598032862)*cj0*px*py*r01*sj2))+(((5.21607187939662e-5)*cj0*cj2*r00))+(((-0.999998735952397)*r00*sj0*sj2*(px*px)))+(((-1.0)*cj2*r02*(py*py)))+(((0.00179193711398091)*r02*sj2))+(((1.99999747190479)*cj0*px*py*r00*sj2))+(((0.00317999598032862)*cj0*px*pz*r02*sj2))+(((0.0328054835182177)*cj0*cj2*r01))+(((0.999998735952397)*r00*sj0*sj2*(pz*pz)))+(((-0.00158999799016431)*cj0*r00*sj2*(pz*pz)))+(((0.999998735952397)*cj0*r01*sj2*(py*py)))+(((-1.99999747190479)*px*pz*r02*sj0*sj2))+(((-0.0328054835182177)*r00*sj0))+(((-1.0)*r02*(px*px)))+(((2.0)*py*pz*r01))+(((-1.0)*r02*(py*py)))+(((5.21607187939662e-5)*cj0*r00))+(((0.0328054835182177)*cj0*r01))+((r02*(pz*pz)))))*(IKsin(j1))))+(((0.00931611454239191)*pz*r02*sj2))+(((-0.0930039303761931)*cj2*py*r01))+(((0.000627546584627838)*cj2*py*r02*sj0))+(((0.000627546584627838)*py*r02*sj0))+(((0.394683386558389)*cj2*pz*r00*sj0))+(((-0.0930039303761931)*px*r00))+(((0.000627546584627838)*cj0*cj2*px*r02))+(((0.394683386558389)*cj0*py*r02))+(((-0.000147876062375529)*py*r02*sj0*sj2))+(((0.394683386558389)*cj0*cj2*py*r02))+(((-0.394683386558389)*cj2*px*r02*sj0))+(((0.000147876062375529)*cj0*pz*r00*sj2))+(((0.00931611454239191)*py*r01*sj2))+(((-0.0930039303761931)*pz*r02))+(((-0.394683386558389)*px*r02*sj0))+(((((((0.999998735952397)*cj0*r01*(pz*pz)))+(((-1.99999747190479)*cj0*cj2*px*py*r00))+(((0.00158999799016431)*r01*sj0*(pz*pz)))+(((-0.999998735952397)*r00*sj0*(pz*pz)))+(((0.999998735952397)*cj0*r01*(px*px)))+(((-0.999998735952397)*cj2*r00*sj0*(py*py)))+(((-1.99999747190479)*cj0*cj2*py*pz*r02))+(((-2.84917640973048e-6)*cj0*r00*sj2))+(((-0.00891733628560013)*r00*sj0))+(((1.41785646941042e-5)*r01*sj0))+(((-0.00158999799016431)*r01*sj0*(py*py)))+(((-0.999998735952397)*cj0*r01*(py*py)))+(((-0.00317999598032862)*cj2*px*py*r00*sj0))+(((-1.99999747190479)*cj0*px*py*r00))+(((1.41785646941042e-5)*cj0*cj2*r00))+(((-0.00317999598032862)*px*py*r00*sj0))+(((-1.99999747190479)*cj0*py*pz*r02))+(((-0.999998735952397)*cj2*r00*sj0*(pz*pz)))+(((0.00891733628560013)*cj0*r01))+(((0.00158999799016431)*cj2*r01*sj0*(px*px)))+(((-1.0)*r02*sj2*(py*py)))+((r02*sj2*(pz*pz)))+(((-0.00891733628560013)*cj2*r00*sj0))+(((0.999998735952397)*r00*sj0*(px*px)))+(((1.99999747190479)*px*py*r01*sj0))+(((0.999998735952397)*cj0*cj2*r01*(px*px)))+(((0.00158999799016431)*cj0*cj2*r00*(py*py)))+(((-0.00158999799016431)*cj0*cj2*r00*(px*px)))+(((-0.999998735952397)*r00*sj0*(py*py)))+(((0.00158999799016431)*cj0*cj2*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*py*r01))+(((0.999998735952397)*cj0*cj2*r01*(pz*pz)))+(((-0.00158999799016431)*cj2*r01*sj0*(py*py)))+(((0.00158999799016431)*cj0*r00*(py*py)))+(((2.0)*py*pz*r01*sj2))+(((-0.00158999799016431)*cj0*r00*(px*px)))+(((-0.00317999598032862)*cj2*py*pz*r02*sj0))+(((-2.84917640973048e-6)*r01*sj0*sj2))+(((0.00158999799016431)*cj2*r01*sj0*(pz*pz)))+(((1.99999747190479)*cj2*px*pz*r02*sj0))+(((-0.00643094216732173)*r02*sj2))+(((-1.0)*r02*sj2*(px*px)))+(((-0.0017919348488871)*cj0*r01*sj2))+(((1.99999747190479)*px*pz*r02*sj0))+(((-0.00317999598032862)*py*pz*r02*sj0))+(((0.00891733628560013)*cj0*cj2*r01))+(((-0.00317999598032862)*cj0*cj2*px*py*r01))+(((0.0328055249859629)*r02))+(((0.0017919348488871)*r00*sj0*sj2))+(((-0.00317999598032862)*cj0*cj2*px*pz*r02))+(((1.41785646941042e-5)*cj2*r01*sj0))+(((0.00158999799016431)*cj0*r00*(pz*pz)))+(((-0.00317999598032862)*cj0*px*pz*r02))+(((2.0)*px*pz*r00*sj2))+(((0.0328055249859629)*cj2*r02))+(((-0.999998735952397)*cj0*cj2*r01*(py*py)))+(((0.999998735952397)*cj2*r00*sj0*(px*px)))+(((1.41785646941042e-5)*cj0*r00))+(((0.00158999799016431)*r01*sj0*(px*px)))+(((1.99999747190479)*cj2*px*py*r01*sj0))))*(IKcos(j1))))+(((-0.0930039303761931)*py*r01))+(((0.00931611454239191)*px*r00*sj2))+(((-0.000627546584627838)*cj2*pz*r01*sj0))+(((-0.0930039303761931)*cj2*px*r00)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x280=((0.0183014928682585)*sj1);
IkReal x281=(py*sj0);
IkReal x282=((0.00446377874835573)*cj1);
IkReal x283=(cj0*px);
IkReal x284=(sj1*sj2);
IkReal x285=(cj1*cj2);
IkReal x286=(cj1*sj2);
IkReal x287=((2.80741156653565)*pz);
IkReal x288=(cj2*sj1);
IkReal x289=((11.5103874227962)*pz);
IkReal x290=(sj1*x289);
IkReal x291=(sj2*x283);
IkReal x292=((0.00446377874835573)*x288);
IkReal x293=(sj1*x287);
IkReal x294=((11.5103728731185)*px*sj0);
IkReal x295=((2.80740801783379)*px*sj0);
IkReal x296=((11.5103728731185)*cj0*py);
IkReal x297=((2.80740801783379)*cj0*py);
if( IKabs(((-0.567097136440202)+(((-1.0)*x284*x296))+((x285*x287))+(((-1.0)*x285*x294))+(((-1.0)*x288*x289))+(((-1.0)*x286*x295))+((x281*x292))+((x282*x291))+((sj2*x281*x282))+(((0.0183014928682585)*x281*x285))+((x283*x292))+((x284*x294))+(((-0.522178551375632)*cj2))+(((-1.0)*sj2*x280*x281))+((x285*x296))+((x286*x297))+(((-1.0)*x284*x287))+(((-1.0)*x288*x295))+(((-1.0)*x280*x291))+(((-1.0)*x286*x289))+(((2.14093206064009)*sj2))+((x288*x297))+(((0.0183014928682585)*x283*x285)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-2.32509825940483)+(((-1.0)*x284*x295))+((x285*x289))+(((-1.0)*x285*x297))+(((0.00446377874835573)*x283*x284))+((x286*x287))+((cj2*x280*x283))+((cj2*x280*x281))+(((-1.0)*x286*x294))+(((0.0183014928682585)*x281*x286))+(((-2.14093206064009)*cj2))+(((0.00446377874835573)*x281*x284))+((x284*x297))+((x285*x295))+((x286*x296))+(((-1.0)*x284*x289))+(((-0.522178551375632)*sj2))+(((-1.0)*x288*x294))+(((-1.0)*cj2*x281*x282))+((x287*x288))+(((-1.0)*cj2*x282*x283))+((x288*x296))+(((0.0183014928682585)*x283*x286)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-0.567097136440202)+(((-1.0)*x284*x296))+((x285*x287))+(((-1.0)*x285*x294))+(((-1.0)*x288*x289))+(((-1.0)*x286*x295))+((x281*x292))+((x282*x291))+((sj2*x281*x282))+(((0.0183014928682585)*x281*x285))+((x283*x292))+((x284*x294))+(((-0.522178551375632)*cj2))+(((-1.0)*sj2*x280*x281))+((x285*x296))+((x286*x297))+(((-1.0)*x284*x287))+(((-1.0)*x288*x295))+(((-1.0)*x280*x291))+(((-1.0)*x286*x289))+(((2.14093206064009)*sj2))+((x288*x297))+(((0.0183014928682585)*x283*x285))))+IKsqr(((-2.32509825940483)+(((-1.0)*x284*x295))+((x285*x289))+(((-1.0)*x285*x297))+(((0.00446377874835573)*x283*x284))+((x286*x287))+((cj2*x280*x283))+((cj2*x280*x281))+(((-1.0)*x286*x294))+(((0.0183014928682585)*x281*x286))+(((-2.14093206064009)*cj2))+(((0.00446377874835573)*x281*x284))+((x284*x297))+((x285*x295))+((x286*x296))+(((-1.0)*x284*x289))+(((-0.522178551375632)*sj2))+(((-1.0)*x288*x294))+(((-1.0)*cj2*x281*x282))+((x287*x288))+(((-1.0)*cj2*x282*x283))+((x288*x296))+(((0.0183014928682585)*x283*x286))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j3array[0]=IKatan2(((-0.567097136440202)+(((-1.0)*x284*x296))+((x285*x287))+(((-1.0)*x285*x294))+(((-1.0)*x288*x289))+(((-1.0)*x286*x295))+((x281*x292))+((x282*x291))+((sj2*x281*x282))+(((0.0183014928682585)*x281*x285))+((x283*x292))+((x284*x294))+(((-0.522178551375632)*cj2))+(((-1.0)*sj2*x280*x281))+((x285*x296))+((x286*x297))+(((-1.0)*x284*x287))+(((-1.0)*x288*x295))+(((-1.0)*x280*x291))+(((-1.0)*x286*x289))+(((2.14093206064009)*sj2))+((x288*x297))+(((0.0183014928682585)*x283*x285))), ((-2.32509825940483)+(((-1.0)*x284*x295))+((x285*x289))+(((-1.0)*x285*x297))+(((0.00446377874835573)*x283*x284))+((x286*x287))+((cj2*x280*x283))+((cj2*x280*x281))+(((-1.0)*x286*x294))+(((0.0183014928682585)*x281*x286))+(((-2.14093206064009)*cj2))+(((0.00446377874835573)*x281*x284))+((x284*x297))+((x285*x295))+((x286*x296))+(((-1.0)*x284*x289))+(((-0.522178551375632)*sj2))+(((-1.0)*x288*x294))+(((-1.0)*cj2*x281*x282))+((x287*x288))+(((-1.0)*cj2*x282*x283))+((x288*x296))+(((0.0183014928682585)*x283*x286))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x298=IKsin(j3);
IkReal x299=IKcos(j3);
IkReal x300=((0.999998735952397)*cj1);
IkReal x301=(r00*sj0);
IkReal x302=((0.999998735952397)*cj4);
IkReal x303=((0.00158999799016431)*sj4);
IkReal x304=((0.00158999799016431)*sj1);
IkReal x305=(py*sj0);
IkReal x306=((0.999998735952397)*sj1);
IkReal x307=(cj0*r01);
IkReal x308=(cj0*py);
IkReal x309=((1.0)*cj1);
IkReal x310=(cj0*r00);
IkReal x311=((0.00158999799016431)*cj1);
IkReal x312=(cj0*px);
IkReal x313=(r01*sj0);
IkReal x314=(px*sj0);
IkReal x315=(cj2*x299);
IkReal x316=(sj2*x299);
IkReal x317=(sj2*x298);
IkReal x318=(cj2*x298);
evalcond[0]=(((x300*x314))+(((-1.0)*x305*x311))+(((0.202)*sj2))+(((0.02)*x317))+((pz*sj1))+(((-1.0)*x300*x308))+(((0.082)*x318))+(((0.082)*x316))+(((-0.02)*x315))+(((-1.0)*x311*x312)));
evalcond[1]=((0.186)+(((-0.082)*x317))+(((-1.0)*x306*x308))+((x306*x314))+(((-1.0)*x304*x312))+(((-1.0)*pz*x309))+(((0.02)*x318))+(((0.02)*x316))+(((-1.0)*x304*x305))+(((0.082)*x315))+(((0.202)*cj2)));
evalcond[2]=((((-1.0)*x310*x311))+(((-1.0)*x303*x318))+(((-1.0)*x303*x316))+(((-1.0)*x302*x316))+(((-1.0)*x302*x318))+((r02*sj1))+((x300*x301))+(((-1.0)*x300*x307))+(((-1.0)*x311*x313)));
evalcond[3]=(((x301*x306))+((x302*x317))+(((-1.0)*x303*x315))+(((-1.0)*x302*x315))+(((-1.0)*r02*x309))+(((-1.0)*x306*x307))+(((-1.0)*x304*x313))+(((-1.0)*x304*x310))+((x303*x317)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(5);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}
    }
}
}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - mobile_manipulator (7d86683b0516ee6fcadf751937899916)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
